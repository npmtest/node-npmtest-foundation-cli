{"/home/travis/build/npmtest/node-npmtest-foundation-cli/test.js":"/* istanbul instrument in package npmtest_foundation_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-foundation-cli/lib.npmtest_foundation_cli.js":"/* istanbul instrument in package npmtest_foundation_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_foundation_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_foundation_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-foundation-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-foundation-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_foundation_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_foundation_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_foundation_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_foundation_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_foundation_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_foundation_cli.__dirname + '/lib.npmtest_foundation_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/lib/index.js":"module.exports = {\n  help: require('./commands/help'),\n  new: require('./commands/new'),\n  update: require('./commands/update'),\n  watch: require('./commands/watch'),\n  build: require('./commands/build'),\n  blocks: require('./commands/blocks'),\n  kits: require('./commands/kits')\n}\n","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/lib/commands/help.js":"var colors = require('colors');\n\nvar helpText = {\n  // Each command is an array of strings\n  // To print the command, the array is joined into one string, and a line break is added\n  // between each item. Basically, each comma you see becomes a line break.\n  'default': [\n    'Commands:',\n    '  new'.cyan + '       Create a new Foundation project',\n    '  update'.cyan + '    Update an existing Foundation project',\n    '  watch'.cyan + '     Watch a project\\'s files for changes',\n    '  build'.cyan + '     Build a project\\'s files for production',\n    '  blocks'.cyan + '    List and install building blocks',\n    '  kits'.cyan + '      List and install building block kits',\n    '  help'.cyan + '      Show this screen',\n    '  -v'.cyan + '        Display the CLI\\'s version',\n    '',\n    'To learn more about a specific command, type ' + 'foundation help <command>'.cyan,\n    '',\n    'Need more help? Ask a question on the Foundation Forum: ' + 'foundation.zurb.com/forum'.cyan\n  ],\n  'new': [\n    'Usage:',\n    '  foundation new ',\n    '  foundation new ' + '--framework sites',\n    '  foundation new ' + '--template basic',\n    '  foundation new ' + '--directory appname',\n    '',\n    'Creates a new Foundation project.',\n    'Run the command without any flags to get an interactive setup prompt.',\n    'You can also manually supply the framework and folder name using the ' + '--framework'.cyan + ' and ' + '--directory'.cyan + ' flags.',\n    '  If creating a ' + 'sites'.cyan + ' project, add the ' + '--template'.cyan + ' flag as well. The value can be ' + 'basic'.cyan + ' or ' + 'zurb'.cyan + '.'\n  ],\n  'update': [\n    'Usage:',\n    '  foundation update',\n    '',\n    'Updates an existing Foundation project by running \"bower update\".'\n  ],\n  'watch': [\n    'Usage:',\n    '  foundation watch',\n    '',\n    'Assembles your app\\'s files and watches for any new changes to the files.',\n    'Keep this command running while you work on your project.'\n  ],\n  'build': [\n    'Usage:',\n    '  foundation build',\n    '',\n    'Assembles your app\\'s files into a production-ready build.'\n  ],\n  'help': [\n    'Okay, don\\'t get clever. But seriously:',\n    '',\n    'Usage:',\n    '  foundation help',\n    '  foundation help <command>',\n    '',\n    'Type ' + 'foundation help'.cyan + ' to see a list of every command,',\n    'or ' + 'foundation help <command>'.cyan + ' to learn how a specific command works.'\n  ],\n  'blocks': [\n    'Usage:',\n    '  foundation blocks list ',\n    '  foundation blocks install <block>',\n    '',\n    'List available building blocks, or install them',\n  ],\n  'kits': [\n    'Usage:',\n    '  foundation kits list ',\n    '  foundation kits install <kits>',\n    '',\n    'List available building block kits, or install them',\n  ],\n}\n\nmodule.exports = function(args, options) {\n  var say;\n  if (typeof args === 'undefined' || args.length === 0) {\n    say = 'default'\n  } else {\n    say = args[0]\n  }\n  // A line break is added before and after the help text for good measure\n  say = '\\n' + helpText[say].join('\\n') + '\\n\\n'\n\n  process.stdout.write(say);\n}\n","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/lib/commands/new.js":"var async    = require('async');\nvar bower    = require('bower');\nvar colors   = require('colors');\nvar exec     = require('child_process').exec;\nvar fs       = require('fs');\nvar inquirer = require('inquirer');\nvar isRoot   = require('is-root');\nvar npm      = require('npm');\nvar path     = require('path');\nvar rimraf   = require('rimraf');\nvar which    = require('which');\nvar util     = require('../util');\nvar EventEmitter = require(\"events\").EventEmitter;\nvar format   = require('util').format;\n\nvar repositories = {\n  sites: {\n    basic: 'https://github.com/zurb/foundation-sites-template.git',\n    zurb: 'https://github.com/zurb/foundation-zurb-template.git'\n  },\n  apps: 'https://github.com/zurb/foundation-apps-template.git',\n  emails: 'https://github.com/zurb/foundation-emails-template.git'\n}\n\nmodule.exports = function(args, options, callback, ee) {\n  var projectName, projectFolder, framework, template, messages, directory;\n  var tasks = [\n    preflight, prompt, gitClone, folderSetup, npmInstall, bowerInstall\n  ];\n\n  // Each function below is executed in order\n  async.series(tasks, finish);\n\n  // 1. Check that the process isn't root, and that Git is installed\n  function preflight(cb) {\n    if (isRoot()) {\n      console.log(util.mascot('sites', util.messages.noRoot));\n      process.exit(1);\n    }\n\n    which('git', function(er) {\n      if (er) {\n        console.log(util.messages.gitNotInstalled);\n        process.exit(69);\n      }\n      cb();\n    });\n  }\n\n  // 2. Find out what the user wants to do\n  function prompt(cb) {\n    inquirer.prompt(util.questions(options), function(answers) {\n      // The variables we need either came from the prompts, or the console arguments\n      projectName = answers.directory || options.directory;\n      framework = answers.framework || options.framework;\n      template = answers.template || options.template || 'unspecified';\n      projectFolder = path.join(process.cwd(), projectName);\n      messages = util.messages(projectName,framework,template);\n\n      cb();\n    });\n  }\n\n  // 3. Clone the framework's template project\n  function gitClone(cb) {\n    var repo = framework === 'sites'\n      ? repositories.sites[template]\n      : repositories[framework];\n\n    var cmd = format('git clone %s %s', repo, projectName);\n    var hello = formatHello(messages.helloYeti, framework);\n\n    console.log(util.mascot(framework, hello));\n    process.stdout.write(messages.downloadingTemplate);\n\n    // [TODO] Change to spawn and check for errors on stderr\n    if (repositories[framework] === undefined) {\n\tconsole.log(\"error!\".red + \"\\nFramework \" + framework.cyan + \" unknown.\");\n\tprocess.exit(1);\n    }\n\n    exec(cmd, function(err) {\n      if (err instanceof Error) {\n        console.log(messages.gitCloneError);\n        process.exit(1);\n      }\n\n      process.chdir(projectFolder);\n\n      cb();\n    });\n\n    if (typeof(ee) !== 'undefined') {\n      ee.emit(\"cloneSuccess\", projectName);\n    }\n  }\n\n  // 4. Remove the Git folder and change the version number if applicable\n  function folderSetup(cb) {\n    rimraf('.git', function() {});\n    console.log(messages.installingDependencies);\n    cb();\n\n    // if (options.edge) {\n    //   util.changeVersion(directory, 'foundation-'+framework, 'master', cb);\n    // }\n    // else if (options.version) {\n    //   util.changeVersion(directory, 'foundation-'+framework, options.version, cb);\n    // }\n    // else {\n    //   cb();\n    // }\n  }\n\n  // 5. Install Node dependencies\n  function npmInstall(cb) {\n    npm.load({ prefix: projectFolder, loglevel: 'error', loaded: false }, function(err) {\n      npm.commands.install([], function(err, data) {\n        if (options.debug && err) console.log(err);\n        var success = err === null;\n        if(success && typeof(ee) !== 'undefined') ee.emit(\"npmInstallSuccess\", projectName);\n        else if(typeof(ee) !== 'undefined') ee.emit(\"npmInstallFailure\", projectName);\n        cb(null, success);\n      });\n    });\n  }\n\n  // 6. Install Bower dependencies\n  function bowerInstall(cb) {\n    // Only run \"bower install\" if a bower.json is present\n    if (!fs.existsSync('bower.json')) {\n      cb(null, true)\n    }\n    else {\n      bower.commands.install(undefined, undefined, {\n        cwd: process.cwd(), silent: true, quiet: true, production: true })\n      .on('err', function(err) {\n        if (typeof ee !== 'undefined')\n          ee.emit(\"bowerInstallFailure\", projectName);\n        cb(null, false);\n      })\n      .on('end', function(data) {\n        if (typeof ee !== 'undefined')\n          ee.emit(\"bowerInstallSuccess\", projectName);\n        cb(null, true);\n      });\n    }\n  }\n\n  // 7. Finish the process with a status report\n  function finish(err, results) {\n    // Indexes 4 and 5 of results are the npm/Bower statuses\n    // All the rest should be undefined\n    var allGood = results.indexOf(false) === -1;\n\n    if (allGood)\n      console.log(messages.installSuccess);\n    else\n      console.log(messages.installFail);\n\n    console.log(messages.gitCloneSuccess);\n\n    if (results[4])\n      console.log(messages.npmSuccess);\n    else\n      console.log(messages.npmFail);\n\n    if (results[5])\n      console.log(messages.bowerSuccess);\n    else if (fs.existsSync('bower.json'))\n      console.log(messages.bowerFail);\n\n    if (allGood)\n      console.log(messages.installSuccessFinal);\n    else\n      console.log(messages.installFailFinal);\n\n    if (typeof(callback)!=='undefined') callback();\n  }\n}\n\nfunction formatHello(str, framework) {\n  framework = framework.charAt(0).toUpperCase() + framework.slice(1)\n  str = str.join('\\n');\n  str = str.replace('%s', framework);\n  return str.split('\\n');\n}\n","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/lib/util/index.js":"module.exports = {\n  changeVersion: require('./changeVersion'),\n  copySettings: require('./copySettings'),\n  mascot: require('./mascot'),\n  messages: require('./messages'),\n  questions: require('./questions')\n}","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/lib/util/changeVersion.js":"var fs = require('fs');\nvar semver = require('semver');\nvar path = require('path');\nvar colors = require('colors');\n\n/**\n * Changes the version number of a dependency in bower.json.\n * @param {String} cwd - Directory the bower.json file is inside.\n * @param {String} dep - Dependency to change.\n * @param {String} version - Semver-valid version to change to. `master` is also an acceptable version.\n * @param {Function} cb - Callback to run when the file is done being written to.\n */\nmodule.exports = function(cwd, dep, version, cb) {\n  if (semver.valid(version) || version === 'master') {\n    var bowerPath = path.join(cwd, 'bower.json');\n    var bowerJSON = require(bowerPath);\n\n    bowerJSON.dependencies[dep] = version;\n    fs.writeFile(bowerPath, JSON.stringify(bowerJSON, null, '  '), cb);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/lib/util/copySettings.js":"var fs = require('fs');\n\nmodule.exports = function(cb) {\n  fs.unlinkSync('client/assets/scss/_settings.scss');\n  fs.createReadStream('bower_components/foundation-apps/scss/_settings.scss')\n    .pipe(fs.createWriteStream('client/assets/scss/_settings.scss'))\n    .on('finish', function() {\n      cb();\n    });\n}","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/lib/util/mascot.js":"var colors       = require('colors')\nvar multiline    = require('multiline');\nvar paint        = require('paint-by-number');\nvar stringLength = require('string-length');\n\nvar family = {};\nvar colors = {};\nvar palette = {\n  0: 'grey',\n  1: 'cyan',\n  2: 'magenta',\n  3: 'yellow'\n}\n\nmodule.exports = mascot;\n\n// This function takes an array of text messages and places them next to the ASCII mascot\nfunction mascot(mascot, text) {\n  if (!mascot.match(/^(sites|apps|emails)$/)) {\n    mascot = 'sites';\n  }\n  if (typeof text === 'string') {\n    text = text.split('\\n');\n  }\n\n  var colorScheme = colors[mascot].split('\\n');\n\n  // The mascot image is split into an array of lines, and colored\n  var yeti = family[mascot];\n  yeti = yeti.split('\\n');\n  yeti = paint(yeti, colorScheme, palette);\n\n  // Distance between the mascot and the text\n  var baseTextOffset = 5;\n  // Number of lines in the mascot image\n  var yetiHeight  = yeti.length - 1;\n  // Number of lines in the message\n  var textHeight  = text.length;\n  // Vertical offset for message\n  var textOffset  = Math.floor((yetiHeight - textHeight) / 2);\n  // Longest line length in the mascot image\n  var longestLine = getLongestLine(yeti);\n\n  // Prepend a newline to each line of the mascot image\n  for (var i in yeti) {\n    yeti[i] = '\\n ' + yeti[i];\n  }\n\n  // Append each line of the text message to the mascot image\n  for (var i = 0; i < text.length; i++) {\n    var offset = textOffset + i;\n    var newLine = i > 0 ? '\\n' : '';\n    var spaceCount = longestLine - stringLength(yeti[offset]) + baseTextOffset;\n\n    yeti[offset] = yeti[offset] + repeatChar(' ', spaceCount) + text[i];\n  }\n\n  return yeti.join('') + '\\n';\n}\n\n// Find the longest line in an array of strings\nfunction getLongestLine(yeti) {\n  var highest = 0;\n  for (var i = 0; i < yeti.length; i++) {\n    var len = stringLength(yeti[i]);\n    if (len > highest) highest = len;\n  }\n  return highest;\n}\n\n// Thank you: http://stackoverflow.com/a/5450113/492553\nfunction repeatChar(pattern, count) {\n  if (count < 1) return '';\n  var result = '';\n  while (count > 1) {\n    if (count & 1) result += pattern;\n    count >>= 1, pattern += pattern;\n  }\n  return result + pattern;\n}\n\n// Mascots!\n\nfamily.sites = multiline(function() {/*\n           .\n          /|     ,\n     , /|/  \\/| /|\n    /|/       |/ |\n|___|            |___|\n\\___|  ^^   ^^   |___/\n    | -[O]--[O]- |\n    |    ___,    |\n    |    ...     |\n     \\__________/\n*/});\n\ncolors.sites = multiline(function() {/*\n            \n                  \n                  \n                  \n0000              0000\n0000              0000\n      00 0000 00  \n                  \n                  \n                 \n*/});\n\nfamily.apps = multiline(function() {/*\n          /|\n         | |  /| ,\n    .  /\\|  \\/ |/|\n    |\\/          |\n    ||\\__/\\____/||\n ___|| ======== ||___\n/___||  O    O  ||___\\\n    ||  ______, || \n    /|          |\\\n   /_/\\\\/\\  /\\//\\_\\\n       \\/\\\\//\\/\n          \\/\n*/});\n\ncolors.apps = multiline(function() {/*\n            \n                  \n                  \n                  \n     111111111111 \n 000 1 00000000 1 000\n0000 1  1    1  1 0000\n     1  1111111 1  \n     1          1 \n       111  111    \n          11   \n            \n*/});\n\nfamily.emails = multiline(function() {/*\n         _____\n        /     \\\n       /=   . |\n   ___| ==  | /\n  /   | ===  \\\n  |   | ====  |\n  /__/| =====  \\\n      (   __   )\n       (O)  (O)\n      (   __,  )\n       \\______/\n*/});\n\ncolors.emails = multiline(function() {/*\n         22222\n        2     2\n       23   2 2\n   2222 33  2 2\n  2   2 333  2\n  2   2 3333  2\n  22222 33333  2\n      2        2\n               \n      2        2\n       22222222\n*/});\n","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/bin/foundation.js":"#!/usr/bin/env node\n\nvar nopt       = require('nopt');\nvar update     = require('update-notifier');\nvar pkg        = require('../package.json');\nvar foundation = require('../lib');\n\n// Options that can be passed to commands\nvar options = {\n  \"framework\": String,\n  \"template\": String,\n  \"directory\": String\n}\n\n// Shorthands for the above commands\nvar shorthands = {\n  \"v\": \"--version\",\n  \"f\": \"--framework\",\n  \"t\": \"--template\",\n  \"d\": \"--directory\"\n}\n\nvar parsed = nopt(options, shorthands);\n\n// cmd.args contains basic commands like \"new\" and \"help\"\n// cmd.opts contains options, like --libsass and --version\nvar cmd = {\n  args: parsed.argv.remain,\n  opts: parsed\n}\n\n// Check for updates once a day\nvar notifier = update({\n  packageName: pkg.name,\n  packageVersion: pkg.version\n});\nnotifier.notify();\n\n// No other arguments given\nif (typeof cmd.args[0] === 'undefined') {\n  // If -v or --version was passed, show the version of the CLI\n  if (typeof cmd.opts.version !== 'undefined') {\n    process.stdout.write(\"Foundation CLI version \" + require('../package.json').version + '\\n');\n  }\n  // Otherwise, just show the help screen\n  else {\n    foundation.help();\n  }\n}\n\n// Arguments given\nelse {\n  // If the command typed in doesn't exist, show the help screen\n  if (typeof foundation[cmd.args[0]] == 'undefined') {\n    foundation.help();\n  }\n  // Otherwise, just run it already!\n  else {\n    // Every command function is passed secondary commands, and options\n    // So if the user types \"foundation new myApp --edge\", \"myApp\" is a secondary command, and \"--edge\" is an option\n    foundation[cmd.args[0]](cmd.args.slice(1), cmd.opts);\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/lib/commands/blocks.js":"var _    = require('lodash');\nvar fs   = require('fs');\nvar async = require('async');\nvar yaml = require('js-yaml');\nvar fetchUrl = require('../util/fetch-url')\nvar help = require('./help')\nvar assertInstallableRepo = require('../util/assert-installable-repo');\n\nvar subcommands = {\n  list: listBuildingBlocks,\n  install: installBuildingBlock\n};\n\nmodule.exports = function(args, options, callback) {\n  var fn = subcommands[args[0]]\n  if(fn) {\n    fn(args.slice(1), options, callback);\n  } else {\n    help(['blocks']);\n  }\n}\n\nfunction listBuildingBlocks(args, options, callback) {\n  fetchUrl('foundation.zurb.com', '/building-blocks/data/building-blocks.json', function(blocksJson) {\n    var blocks = JSON.parse(blocksJson);\n    _.each(blocks, function(value, key) {\n      // TODO: handle version info, etc\n      console.log(key + ': ' + value.name);\n    });\n    if(callback) {callback()};\n  });\n}\n\nfunction installBuildingBlock(args, options, callback) {\n  var name = args[0];\n  assertInstallableRepo(function(type) {\n    if(type === 'zip') {\n      downloadZipFile(name, function(err) {\n        if(err) {\n          console.log(err);\n        } else {\n          console.log('downloaded ' + name + '.zip');\n        }\n      });\n    } else {\n      installFiles(name, function(err, results) {\n        if(results && _.every(results)) {\n          console.log('Not found: ' + name)\n        } else {\n          async.parallel([updateAppSCSS.bind(null, name), updateConfigYml.bind(null, name)]\n          , function() {\n            console.log(\"installed \", name);\n            if(callback) {callback();}\n          });\n        }\n      });\n    }\n  });\n}\n\nfunction updateConfigYml(name, callback) {\n  var doc         = fs.readFileSync('config.yml', 'utf8'),\n      jsString    = \"src/assets/js/building-blocks/\" + name + \".js\",\n      appJsString = \"src/assets/js/app.js\",\n      lineNum = -1;\n\n  if(!fs.existsSync(jsString)) {\n    if(callback) {callback();}\n    return;\n  }\n  var lines = doc.split('\\n');\n  for(var line = 0; line < lines.length; line++){\n    if (lines[line].indexOf(jsString) !== -1) {\n      if(callback) {return callback();} else { return; }\n    }\n    if (lines[line].indexOf(appJsString) !== -1) {\n      lineNum = line;\n      break;\n    }\n  }\n  if (lineNum !== -1) { \n    lines.splice(lineNum, 0, '    - \"' + jsString + '\"');\n    fs.writeFileSync('config.yml', lines.join(\"\\n\"));\n  } else {\n    console.log(\"failed to automatically update config.yml; make sure you include the appropriate js\")\n  }\n  if(callback) {callback();}\n}\n\nfunction updateAppSCSS(name, callback) {\n  var scssString    = \"src/assets/scss/componentsbuilding-blocks/_\" + name + \".scss\";\n\n  if(!fs.existsSync(scssString)) {\n    if(callback) {callback();}\n    return;\n  }\n  fs.readFile('src/assets/scss/app.scss', {}, function(err, content) {\n    line = \"@import 'components/building-blocks/\" + name + \"';\"\n    if(content.indexOf(line) === -1) {\n      content = content + \"\\n\" + line;\n    }\n    fs.writeFile('src/assets/scss/app.scss', content, callback);\n  });\n};\n\n\nconst FILETYPES = [\n  {\n    name: '.html',\n    directory: 'src/partials/building-blocks/',\n    prefix: ''\n  },\n  {\n    name: '.scss',\n    directory: 'src/assets/scss/components/building-blocks/',\n    prefix: '_'\n  },\n  {\n    name: '.js',\n    directory: 'src/assets/js/building-blocks/',\n    prefix: ''\n  }\n];\nfunction installFiles(name, callback) {\n  async.map(FILETYPES, function(filetype, cb) {\n    var filename = name + filetype.name;\n    var path = '/building-blocks/files/building-blocks/' + name + '/' + filename;\n    fs.mkdir(filetype.directory, function() {\n      fetchUrl('foundation.zurb.com', path, function(file) {\n        if(file.length > 0) {\n          fs.writeFile(filetype.directory + filetype.prefix + filename, file,  cb);\n        } else {\n          cb(null, true);\n        }\n      });\n    });\n  }, callback)\n}\n\nfunction downloadZipFile(name, callback) {\n  var filename = name + '.zip';\n  var path = '/building-blocks/files/building-blocks/' + filename;\n  fetchUrl('foundation.zurb.com', path, function(file) {\n    if(file.length > 0) {\n      fs.writeFile(filename, file,  callback);\n    } else {\n      console.log(\"could not find building block: \" + name);\n      process.exit(1);\n    }\n  });\n\n}\n","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/lib/util/fetch-url.js":"var http = require('http');\n\nmodule.exports = function fetchUrl(host, path, done) {\n  var options = {\n    host: host,\n    path: path\n  };\n  var callback = function(response) {\n    var data = [];\n    response.on('data', function(chunk) {\n      data.push(chunk);\n    });\n    response.on('end', function() {\n      if(response.statusCode === 200) {\n        var buffer = Buffer.concat(data);\n        done(buffer);\n      } else if (response.statusCode == 404) {\n        done('');\n      } else {\n        console.log('error fetching file', path);\n        done('');\n      }\n    });\n  };\n  http.request(options, callback).end();\n}\n","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/lib/util/assert-installable-repo.js":"var fs   = require('fs');\nvar inquirer = require('inquirer');\n\nmodule.exports = function assertInstallableRepo(callback) {\n  var paths = ['src/assets/scss/components', 'src/partials', 'src/assets/js'];\n  var question = {message: 'Do you want to download as a zip file?', default: 'y',\n                  name: 'zip', type: 'list',\n                  choices: [{name: 'Yes', value: 'y'}, {name: 'No', value: 'n'}]};\n  for(var i = 0; i < paths.length; i++) {\n    if(!fs.existsSync(paths[i])) {\n      console.log(\"You don't appear to be in a ZURB stack project, so we can't automatically install building blocks\");\n      inquirer.prompt(question, function(answer) {\n        if(answer.zip === 'y') {\n          callback('zip');\n        } else {\n          process.exit(1);\n        }\n      });\n      return;\n    }\n  }\n  callback('install');\n}\n\n","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/lib/commands/kits.js":"var async = require('async');\nvar _    = require('lodash');\nvar fs   = require('fs');\n\nvar fetchUrl = require('../util/fetch-url')\nvar help = require('./help')\nvar blockCommand = require('./blocks');\nvar assertInstallableRepo = require('../util/assert-installable-repo');\n\nvar subcommands = {\n  list: listKits,\n  install: installKit\n};\n\nmodule.exports = function(args, options, callback) {\n  var fn = subcommands[args[0]]\n  if(fn) {\n    fn(args.slice(1), options, callback);\n  } else {\n    help(['kits']);\n  }\n}\n\nfunction listKits(args, options, callback) {\n  getKitList(function(kits) {\n    _.each(kits, function(value, key) {\n      // TODO: handle version info, etc\n      console.log(key + ': ' + value.total + ' blocks');\n    });\n  });\n}\n\nfunction getKitList(callback) {\n  // For now until kits are implemented, use categories to test out build\n  fetchUrl('foundation.zurb.com', '/building-blocks/data/kits.json', function(kitJson) {\n    var kits = JSON.parse(kitJson);\n    callback(kits);\n  });\n}\n\nfunction installKit(args, options, callback) {\n  var name = args[0];\n  assertInstallableRepo(function(type) {\n    if(type === 'zip') {\n      downloadZipFile(name, function() {\n        console.log('downloaded ' + name + '.zip');\n      });\n    } else {\n      getKitList(function(kits) {\n        if (!kits[name]) {\n          console.log('Could not find kit: ', name);\n          if(callback) {callback();}\n          return;\n        }\n        var blocks = kits[name].blocks;\n        async.eachSeries(blocks, function(block, cb) {\n          blockCommand(['install', block.datakey], {}, cb);\n        }, function() {\n          console.log(\"done installing kit: \", name);\n          if(callback) {callback();}\n        })\n      });\n    }\n  });\n}\n\nfunction downloadZipFile(name, callback) {\n  var filename = name + '.zip';\n  var path = '/building-blocks/files/kits/' + filename;\n  fetchUrl('foundation.zurb.com', path, function(file) {\n    if(file.length > 0) {\n      fs.writeFile(filename, file,  callback);\n    } else {\n      console.log(\"could not find kit: \" + name);\n      process.exit(1);\n    }\n  });\n\n}\n","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/lib/commands/update.js":"var colors = require('colors');\n\nmodule.exports = function() {\n  var bower = require('bower');\n\n  bower.commands.update(undefined, undefined, {\n    cwd: process.cwd(), loglevel: 'warn', production: true })\n  .on('err', function(err) {\n    console.log(err);\n  })\n  .on('end', function(data) {\n    if (!Object.keys(data).length) {\n      console.log('\\nNothing to update. '.cyan + 'You\\'re good!\\n');\n    }\n  });\n}","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/lib/commands/watch.js":"var fs = require('fs');\nvar npm = require('npm');\nvar path = require('path');\n\nmodule.exports = function(args, options) {\n  // Check if the user is inside a project folder, by looking for a package.json\n  if (!fs.existsSync(path.join(process.cwd(), 'package.json'))) {\n    console.log(\"\\nYou don't appear to be in a Foundation project folder.\\n\\nUse \" + \"pwd\".cyan + \" (or \" + \"chdir\".cyan + \" on Windows) to see what folder you're in.\\n\");\n    process.exit(0);\n  }\n\n  npm.load({ prefix: process.cwd(), loaded: false }, function(err) {\n    npm.commands.start.apply(this, []);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/lib/util/messages.js":"var colors = require('colors');\n\nmodule.exports = function(projectName,messageFramework,messageTemplate) {\n  return {\n    helloYeti: [\n      'Thanks for using ZURB Foundation for %s!',\n      '-------------------------------------------',\n      'Let\\'s set up a new project.',\n      'It shouldn\\'t take more than a minute.'\n    ],\n    folderExists: \"\\nThere's already a folder named \" + projectName.cyan + \" here. Please use a different name or delete that folder.\\n\",\n    downloadingTemplate: \"\\nDownloading the project template...\".cyan,\n    gitCloneError: \"There was an issue running \" + \"git clone \".cyan + \"to download the framework \" + \"Foundation for \".cyan + messageFramework.cyan + \" and template \" + messageTemplate.cyan +\".\\nMake sure your computer's Git is configured properly and then try again.\",\n    installingDependencies: \"\\nDone downloading!\".green + \"\\n\\nInstalling dependencies...\".cyan + \"\\n\",\n    gitCloneSuccess: \" \\u2713 New project folder created.\".green,\n    installSuccess: \"\\nYou're all set!\\n\".cyan,\n    installFail: \"\\nThere were some problems during the installation.\\n\".cyan,\n    npmSuccess: \" \\u2713 Node modules installed.\".green,\n    npmFail: \" \\u2717 Node modules not installed.\".red + \" Try running \" + \"npm install\".cyan + \" manually.\",\n    bowerSuccess: \" \\u2713 Bower components installed.\".green,\n    bowerFail: \" \\u2717 Bower components not installed.\".red + \" Try running \" + \"bower install\".cyan + \" manually.\",\n    installSuccessFinal: \"\\nNow run \" + \"foundation watch \".cyan + \"while inside the \" + projectName.cyan + \" folder.\\n\",\n    installFailFinal: \"\\nOnce you've resolved the above issues, run \" + \"foundation watch \".cyan + \"while inside the \" + projectName.cyan + \" folder.\\n\"\n  }\n}\n\nmodule.exports.noRoot = [\n  'Slow down there, friend!',\n  '------------------------',\n  'Running this installer as an administrator can cause problems.',\n  'Try running this command again without \"sudo\" or administrator rights.'\n];\n\nmodule.exports.gitNotInstalled = \"\\nYou need Git installed to get started. Download it here: \" + \"http://git-scm.com/downloads\".cyan + \"\\n\";\n","/home/travis/build/npmtest/node-npmtest-foundation-cli/node_modules/foundation-cli/lib/util/questions.js":"var fs = require('fs');\nvar path = require('path');\n\nmodule.exports = function(options) {\n  var questions = [];\n\n  if (!options.framework || !options.framework.match(/(site|app|email)s*/)) {\n    questions.push({\n      type: 'list',\n      name: 'framework',\n      message: 'What are you building today?',\n      default: 'sites',\n      choices: [{\n        name: 'A website (Foundation for Sites)',\n        value: 'sites'\n      }, {\n        name: 'A web app (Foundation for Apps)',\n        value: 'apps'\n      }, {\n        name: 'An email (Foundation for Emails)',\n        value: 'emails'\n      }]\n    });\n  }\n\n  if (!options.directory) {\n    questions.push({\n      type: 'input',\n      name: 'directory',\n      message: 'What\\'s the project called? (no spaces)',\n      validate: function(input) {\n        var folder = path.join(process.cwd(), input);\n        if (fs.existsSync(folder)) {\n          return 'There\\'s already a folder with that name in this directory.';\n        }\n        if (input.indexOf(\" \") != -1) {\n          return \"The project name should not contain any spaces.\";\n        }\n        return true;\n      }\n    });\n  }\n\n  if (!options.template) {\n    questions.push({\n      type: 'list',\n      name: 'template',\n      message: 'Which template would you like to use?',\n      default: 'basic',\n      choices: [{\n        name: 'Basic Template: includes a Sass compiler',\n        value: 'basic'\n      }, {\n        name: 'ZURB Template: includes Handlebars templates and Sass/JS compilers',\n        value: 'zurb'\n      }],\n      when: function(answers) {\n        return answers.framework === 'sites' || options.framework === 'sites';\n      }\n    });\n  }\n\n  return questions;\n}\n"}